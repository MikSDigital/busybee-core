{# src/Busybee/PersonBundle/Resources/views/Person/edit.html.twig #}

{% trans_default_domain "BusybeePersonBundle" %}

{% extends "BusybeeHomeBundle:Default:template.html.twig" %}

{% form_theme form "BusybeeFormBundle:Template:bootstrap.html.twig" %}

{% block stylesheets %}
	{{ parent() }}
	{% include 'BusybeeHomeBundle:AutoComplete:style.html.twig' %}
{% endblock stylesheets %}


{% block title %}{{ parent() }}{% if id == 'Add' %}{{ 'person.staff.add.title'|trans }}{% else %}{{ 'person.staff.edit.title'|trans }}{% endif %}{% endblock title %}
{% block headerTitle %}{% if id == 'Add' %}{{ 'person.staff.add.title'|trans }}{% else %}{{ 'person.staff.edit.title'|trans }}{% endif %}{% endblock headerTitle %}
{% block headerLead %}{% if id == 'Add' %}{{ 'person.staff.add.description'|trans }}{% else %}{{ 'person.staff.edit.description'|trans }}{% endif %}{% endblock headerLead %}

{% set tabs = get_parameter('person') %}

{% block contentContainer %}
{{ all_form_errors(fullForm, "div", "alert alert-danger fadeAlert") }}
{{ form_start(form) }}
<div id="personTabs">
	<ul class="nav nav-tabs" role="tablist">
		{% for name,tab in tabs %}
			{% set translation = 'BusybeePersonBundle' %}
			{% if tab.translation is defined %}{% set translation = tab.translation %}{% endif %}
			<li><a href="#{{ name }}" role="tab" data-toggle="tab">{{ tab.label|trans({}, translation) }}</a></li>
		{% endfor %}
	</ul>
	{% set active = ' active' %}
	<div class="tab-content">
		{% for name,tab in tabs %}
			{% set translation = 'BusybeePersonBundle' %}
			{% if tab.translation is defined %}{% set translation = tab.translation %}{% endif %}
			<div class="tab-pane{{ active }}" id="{{ name }}" >
				{% if tab.message is defined %}
				<div class="container-fluid">
					<div class='row' id="{{ tab.message }}" style="display: none;">
					</div>
				</div>
				{% endif %}
				{% include(tab.include) %}
			</div>
			{% set active = '' %}
		{% endfor %}
	</div>
</div>
<div class="container-fluid">
	<div class="row">
		<div class="col-sm-12 well">
			<div class="form-group text-right" style="margin-bottom: 5px">
				{{ form_row(form.address1) }} <!--  Address Keys -->
				{{ form_row(form.address2) }}
				{{ form_widget(form.save) }}
				{{ form_widget(form.cancel) }}
			</div>
		</div>
	</div>
</div>
{{ form_end(form) }}
{% endblock contentContainer %}

{% block javascripts %}
	{{ parent() }}
	{% include 'BusybeePersonBundle:Address:script.html.twig' with {'classSuffix': 'address1'} %}
	{% include 'BusybeePersonBundle:Address:script.html.twig' with {'classSuffix': 'address2'} %}
	{% include 'BusybeePersonBundle:Locality:script.html.twig' with {'classSuffix': 'address1'} %}
	{% include 'BusybeePersonBundle:Locality:script.html.twig' with {'classSuffix': 'address2'} %}
	{% include 'BusybeeHomeBundle:AutoComplete:script.html.twig' %}
	<script>
		$('.beeAddressListaddress1').prop('disabled', true);
		$('.beeAddressListaddress1').autocomplete({
			source: [],
			disabled: true,
			minLength: 2,
			delay: 250,
			focus: function(event, ui) {
				// prevent autocomplete from updating the textbox
				event.preventDefault();
				// manually update the textbox
				$(this).val(ui.item.label);
			},
			select: function(event, ui) {
				// prevent autocomplete from updating the textbox
				event.preventDefault();
				// manually update the textbox and hidden field
				$(this).val(ui.item.label);
				$('.beeAddressValueaddress1').val(ui.item.value);
			}
		});
		$('.beeAddressListaddress2').prop('disabled', true);
		$('.beeAddressListaddress2').autocomplete({
			source: [],
			disabled: true,
			minLength: 2,
			delay: 250,
			focus: function(event, ui) {
				// prevent autocomplete from updating the textbox
				event.preventDefault();
				// manually update the textbox
				$(this).val(ui.item.label);
			},
			select: function(event, ui) {
				// prevent autocomplete from updating the textbox
				event.preventDefault();
				// manually update the textbox and hidden field
				$(this).val(ui.item.label);
				$('.beeAddressValueaddress2').val(ui.item.value);
			}
		});
		$( document ).ready(function() {
			$.ajax({
				url: '{{ path('address_fetch') }}',	
				data: {'id': {% if form.fullAddress1.vars.value is not null and form.fullAddress1.vars.value.getId is not null %}{{ form.fullAddress1.vars.value.getId }}{% else %}0{% endif %} },
				type: 'POST',
				success: function(data) {
					$('.beePropertyNameaddress1').val(data.propertyName);
					$('.beeStreetNameaddress1').val(data.streetName);
					$('.beeStreetNumberaddress1').val(data.streetNumber);
					$('.beeBuildingNumberaddress1').val(data.buildingNumber);
					$('.beeBuildingTypeaddress1').val(data.buildingType);
					$('.beeLocalityaddress1').val(data.locality);
					$('.beeTerritoryaddress1').val(data.territory);
					$('.beeCountryaddress1').val(data.country);
					$('.beePostCodeaddress1').val(data.postCode);
					$('#addressDisplayaddress1').html(data.address);
					$('.beeAddressListaddress1').autocomplete( "option", "source", data.addressList );
					$('.beeAddressListaddress1').data('ui-autocomplete')._trigger('select', 'autocompleteselect', {item:{label: data.addressListLabel, value: data.id, stopFetch: true}});
					if (data.addressDisabled == 'true') {
						$('.beeAddressListaddress1').autocomplete( "option", "disabled", true );
						$('.beeAddressListaddress1').autocomplete( 'disable' );
						$('.beeAddressListaddress1').prop('disabled', true);
					} else {
						$('.beeAddressListaddress1').autocomplete( "option", "disabled", false );
						$('.beeAddressListaddress1').prop('disabled', false);
						$('.beeAddressListaddress1').autocomplete( 'enable' );
					}
					$('#addressMessageaddress1').show()
					$('#addressMessageaddress1').removeClass().addClass('row alert alert-' + data.status);
					$('#addressMessageaddress1').html(data.message);
					$('#addressMessageaddress1').fadeOut(3000);				}
			});
			$.ajax({
				url: '{{ path('address_fetch') }}',	
				data: {'id': {% if form.fullAddress2.vars.value is not null and form.fullAddress2.vars.value.getId is not null%}{{ form.fullAddress2.vars.value.getId }}{% else %}0{% endif %} },
				type: 'POST',
				success: function(data) {
					$('.beePropertyNameaddress2').val(data.propertyName);
					$('.beeStreetNameaddress2').val(data.streetName);
					$('.beeStreetNumberaddress2').val(data.streetNumber);
					$('.beeBuildingNumberaddress2').val(data.buildingNumber);
					$('.beeBuildingTypeaddress2').val(data.buildingType);
					$('.beeLocalityaddress2').val(data.locality);
					$('.beeTerritoryaddress2').val(data.territory);
					$('.beeCountryaddress2').val(data.country);
					$('.beePostCodeaddress2').val(data.postCode);
					$('#addressDisplayaddress2').html(data.address);
					$('.beeAddressListaddress2').autocomplete( "option", "source", data.addressList );
					$('.beeAddressListaddress2').autocomplete( "option", "disabled", data.addressDisabled );
					$('.beeAddressListaddress2').data('ui-autocomplete')._trigger('select', 'autocompleteselect', {item:{label: data.addressListLabel, value: data.id, stopFetch: true}});
					if (data.addressDisabled == 'true') {
						$('.beeAddressListaddress2').autocomplete( 'disable' );
						$('.beeAddressListaddress2').prop('disabled', true);
					} else {
						$('.beeAddressListaddress2').prop('disabled', false);
						$('.beeAddressListaddress2').autocomplete( 'enable' );
					}
					$('#addressMessageaddress2').show()
					$('#addressMessageaddress2').removeClass().addClass('row alert alert-' + data.status);
					$('#addressMessageaddress2').html(data.message);
					$('#addressMessageaddress2').fadeOut(3000);
				}
			});
		});
	</script>

	<script>
		$('#addPhoneButton').click(function(e) {
		
			e.preventDefault();
		
			var $collectionHolder  = $('.phoneNumberList');
			
			$collectionHolder.data('index', $collectionHolder.find('.phoneNumber').length);
			
			var index = $collectionHolder.data('index');
			
			var prototype = $collectionHolder.data('prototype');
			
			var newForm = prototype.replace(/__name__/g, index);
						
			$('.phoneNumberList').append(newForm);
			
			$('#person_phone_' + index + '_phoneNumber').autocomplete({
				source: '{{ path('phone_fetch') }}',
				minLength: 4,
				delay: 250,
				focus: function(event, ui) {
					// prevent autocomplete from updating the textbox
					event.preventDefault();
					// manually update the textbox
					$(this).val(ui.item.label);
				},
				select: function(event, ui) {
					// prevent autocomplete from updating the textbox
					event.preventDefault();
					// manually update the textbox and hidden field
					$(this).val(ui.item.label);
				}
			});
			$('#person_phone_' + index + '_phoneNumber').prop('readonly', false);

			$collectionHolder.data('index', index + 1);
			
			$('.deletePhoneButton').hide();


		});
		$('#addPhoneForm').hide();

		$('.deletePhoneButton').click(function(e) {
			e.preventDefault();
			
			var id = $(this).attr('id');

			$('#phone_' + id.substring(12)).remove();
			
			$('#addPhoneButton').hide();
		});
		
		if ( $(".fadeAlert").length ) {
 	   		$(".fadeAlert").fadeOut(3000);
		}

	</script>
{% endblock javascripts %}
